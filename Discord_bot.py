import discord
from discord.ext import commands
import sqlite3
from discord.ext import tasks
from discord import app_commands
from collections import defaultdict
from datetime import datetime, timedelta, timezone
import json,dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
dotenv.load_dotenv()
token = os.getenv("DISCORD_TOKEN")
token = ("MTM3MjIxMzc5MjMyMjIyNDE2OQ.GVzx5l.QiDuvIloNs4RDk_RBoaJg99z1iBUHbRjTAyH88")  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –±–µ–∑–ø–µ—á–Ω–∏–π

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
MESSAGES_PER_REWARD = 8       # –ö–æ–∂–Ω—ñ 8 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
MESSAGE_REWARD_AMOUNT = 2     # ‚Äî –æ—Ç—Ä–∏–º—É—î—à 2 –∫–æ–ø—ñ–π–∫—É
VOICE_REWARD_PER_MIN = 2    # –ö–æ–ø—ñ–π–æ–∫ –∑–∞ 1 —Ö–≤ –≤ –≥–æ–ª–æ—Å—ñ

# –Ü–Ω—Ç–µ–Ω—Ç–∏
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.members = True
intents.voice_states = True

# –ö–ª—ñ—î–Ω—Ç
class MyClient(discord.Client):
    def __init__(self):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()

client = MyClient()

# –§–∞–π–ª–∏
CHAT_TIME_FILE = "chat_times.json"
VOICE_TIME_FILE = "voice_times.json"
BALANCE_FILE = "balances.json"
MESSAGE_COUNT_FILE = "message_counts.json"

# –î–∞–Ω—ñ
user_chat_times = defaultdict(float)
voice_join_times = {}
voice_total_times = defaultdict(float)
voice_weekly_times = defaultdict(list)
message_counts = defaultdict(int)
user_balances = defaultdict(float)

# –í–∫–∞–∂–∏ —Ç—É—Ç ID –∫–∞–Ω–∞–ª—É, –¥–µ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
IMAGE_ONLY_CHANNEL_ID = 1332009384946962483  # <-- –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID

# –ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
IMAGE_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.gif', '.webp' , '.mp4' , '.avi')

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
def load_data():
    if os.path.exists(CHAT_TIME_FILE):
        with open(CHAT_TIME_FILE, "r") as f:
            try:
                data = json.load(f)
                for k, v in data.items():
                    user_chat_times[k] = float(v)
            except:
                pass

    if os.path.exists(VOICE_TIME_FILE):
        with open(VOICE_TIME_FILE, "r") as f:
            try:
                data = json.load(f)
                for k, v in data.get("total", {}).items():
                    voice_total_times[k] = float(v)
                for k, v in data.get("weekly", {}).items():
                    voice_weekly_times[k] = [
                        (datetime.fromtimestamp(t, tz=timezone.utc), float(dur)) for t, dur in v
                    ]
            except:
                pass

    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "r") as f:
            try:
                data = json.load(f)
                for k, v in data.items():
                    user_balances[k] = float(v)
            except:
                pass

    if os.path.exists(MESSAGE_COUNT_FILE):
        with open(MESSAGE_COUNT_FILE, "r") as f:
            try:
                data = json.load(f)
                for k, v in data.items():
                    message_counts[k] = int(v)
            except:
                pass

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
def save_data():
    with open(CHAT_TIME_FILE, "w") as f:
        json.dump(dict(user_chat_times), f)

    with open(VOICE_TIME_FILE, "w") as f:
        json.dump({
            "total": dict(voice_total_times),
            "weekly": {
                k: [(t.timestamp(), dur) for t, dur in v]
               for k, v in voice_weekly_times.items()
            }
        }, f)

    with open(BALANCE_FILE, "w") as f:
        json.dump(dict(user_balances), f)

    with open(MESSAGE_COUNT_FILE, "w") as f:
        json.dump(dict(message_counts), f)

    print("[SAVE] –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

#def cleanup_old_voice_data():
#   week_ago = datetime.now(timezone.utc) - timedelta(days=7)
#    removed = 0
#   for user_id in list(voice_weekly_times.keys()):
#   original = len(voice_weekly_times[user_id])
#        voice_weekly_times[user_id] = [
#            (t, dur) for t, dur in voice_weekly_times[user_id] if t > week_ago
#       ]
#        removed += original - len(voice_weekly_times[user_id])
#    if removed > 0:
#        print(f"[CLEANUP] –í–∏–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç–∞—Ä–∏—Ö voice-—Å–µ—Å—ñ–π.")

load_data()

@client.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç {client.user} –∑–∞–ø—É—â–µ–Ω–æ")

    for guild in client.guilds:
        for vc in guild.voice_channels:
            for member in vc.members:
                if not member.bot and str(member.id) not in voice_join_times:
                    voice_join_times[str(member.id)] = datetime.now(timezone.utc)
                    print(f"[RESTORE] {member.name} –ø–µ—Ä–µ–±—É–≤–∞—î –≤ voice")

    save_loop.start()
    print("[DEBUG] –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ")

@client.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)

    # --- –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å —É —Å–ø–µ—Ü. –∫–∞–Ω–∞–ª—ñ ---
    if message.channel.id == IMAGE_ONLY_CHANNEL_ID:
        has_image = any(
            attachment.filename.lower().endswith(IMAGE_EXTENSIONS)
            for attachment in message.attachments
        ) or any(
            word.lower().endswith(IMAGE_EXTENSIONS)
            for word in message.content.split()
        )

        if not has_image:
            try:
                await message.delete()
            except discord.Forbidden:
                print("–ù–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            except discord.HTTPException as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return  # –ù–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–ø—ñ–π–∫–∏, —è–∫—â–æ –Ω–µ–º–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    # --- –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
    user_chat_times[user_id] += 1
    message_counts[user_id] += 1

    if message_counts[user_id] % MESSAGES_PER_REWARD == 0:
        user_balances[user_id] += MESSAGE_REWARD_AMOUNT
        print(f"[PAY] {message.author.name} –æ—Ç—Ä–∏–º–∞–≤ {MESSAGE_REWARD_AMOUNT} –∫–æ–ø.")

@client.event
async def on_voice_state_update(member, before, after):
    now = datetime.now(timezone.utc)
    user_id = str(member.id)

    if before.channel is None and after.channel is not None:
        voice_join_times[user_id] = now
        print(f"[JOIN] {member.name} –∑–∞–π—à–æ–≤ —É {after.channel.name}")

    elif before.channel is not None and after.channel is None:
        join_time = voice_join_times.pop(user_id, None)
        if join_time:
            duration = (now - join_time).total_seconds()
            voice_total_times[user_id] += duration
            voice_weekly_times[user_id].append((now, duration))
            coins_earned = int(duration // 60) * VOICE_REWARD_PER_MIN
            if coins_earned > 0:
                user_balances[user_id] += coins_earned
                print(f"[VOICE PAY] {member.name} –æ—Ç—Ä–∏–º–∞–≤ {coins_earned} –ö–æ–ø—ñ–π–æ–∫ –∑–∞ voice")
            print(f"[LEAVE] {member.name} ‚Äî {duration:.2f} —Å–µ–∫")
        save_data()

    elif before.channel != after.channel:
        join_time = voice_join_times.get(user_id)
        if join_time:
            duration = (now - join_time).total_seconds()
            voice_total_times[user_id] += duration
            voice_weekly_times[user_id].append((now, duration))
            coins_earned = int(duration // 60)
            if coins_earned > 0:
                user_balances[user_id] += coins_earned
                print(f"[VOICE PAY] {member.name} –æ—Ç—Ä–∏–º–∞–≤ {coins_earned} –ö–æ–ø—ñ–π–æ–∫ –∑–∞ voice")
            print(f"[SWITCH] {member.name} ‚Äî {duration:.2f} —Å–µ–∫ –º—ñ–∂ –∫–∞–Ω–∞–ª–∞–º–∏")
        voice_join_times[user_id] = now
        save_data()

@client.tree.command(name="online", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É voice-—á–∞—Ç–∞—Ö")
@app_commands.describe(user="–ö–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –≤–∏)")
async def online(interaction: discord.Interaction, user: discord.User = None):
    user = user or interaction.user
    user_id = str(user.id)
    now = datetime.now(timezone.utc)

    total_seconds = voice_total_times.get(user_id, 0)
    week_ago = now - timedelta(days=7)
    week_seconds = sum(d for t, d in voice_weekly_times.get(user_id, []) if t > week_ago)

    if user_id in voice_join_times:
        session_start = voice_join_times[user_id]
        session_seconds = (now - session_start).total_seconds()
        total_seconds += session_seconds
        if session_start > week_ago:
            week_seconds += session_seconds

    def format_time(seconds):
        minutes, sec = divmod(int(seconds), 60)
        hours, minutes = divmod(minutes, 60)
        return f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {sec} —Å–µ–∫"

    embed = discord.Embed(
        title=f"üéô Voice-–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Äî {user.name}",
        color=discord.Color.blurple()
    )
    embed.add_field(name="–í—Å—å–æ–≥–æ (voice)", value=format_time(total_seconds), inline=False)
    embed.add_field(name="–¢–∏–∂–Ω–µ–≤–∏–π (voice)", value=format_time(week_seconds), inline=False)

    if user.avatar:
        embed.set_thumbnail(url=user.avatar.url)

    await interaction.response.send_message(embed=embed,ephemeral=True)

@client.tree.command(name="top", description="–ü–æ–∫–∞–∑—É—î —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∫–æ–ø—ñ–π–æ–∫")
async def top(interaction: discord.Interaction):
    top_users = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)[:10]

    if not top_users:
        await interaction.response.send_message("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É.")
        return

    embed = discord.Embed(title="üèÜ –¢–æ–ø 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∫–æ–ø—ñ–π–æ–∫", color=discord.Color.gold())

    for i, (user_id, balance) in enumerate(top_users, start=1):
        try:
            user = await client.fetch_user(int(user_id))
            embed.add_field(
                name=f"{i}. {user.name}",
                value=f"üí∞ {balance:.2f} –∫–æ–ø—ñ–π–æ–∫",
                inline=False
            )
        except:
            embed.add_field(
                name=f"{i}. Unknown User",
                value=f"üí∞ {balance:.2f} –∫–æ–ø—ñ–π–æ–∫",
                inline=False
            )

    await interaction.response.send_message(embed=embed)

@client.tree.command(name="topvoice", description="–¢–û–ü-15 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é")
async def topvoice(interaction: discord.Interaction):
    await interaction.response.defer()  # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ Discord, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–¥–µ –ø—ñ–∑–Ω—ñ—à–µ

    now = datetime.now(timezone.utc)
    durations = dict(voice_total_times)
    for user_id, join_time in voice_join_times.items():
        durations[user_id] = durations.get(user_id, 0) + (now - join_time).total_seconds()

    top = sorted(durations.items(), key=lambda x: x[1], reverse=True)[:15]
    medals = ["üëë", "ü•à", "ü•â"] + [f"#{i}" for i in range(4, 16)]

    embed = discord.Embed(
        title="üéôÔ∏è –¢–û–ü-15 –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ –≤–µ—Å—å —á–∞—Å",
        color=discord.Color.purple(),
        timestamp=now
    )
    embed.set_footer(text="–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≤–µ—Å—å —á–∞—Å")

    description = ""
    for i, (user_id, seconds) in enumerate(top):
        hours = round(seconds / 3600, 2)
        emoji = medals[i]
        try:
            user = await client.fetch_user(int(user_id))
            name = f"<@{user.id}>"
        except:
            name = "`Unknown User`"
        description += f"**{emoji}** {name} ‚Äî `{hours} –≥–æ–¥–∏–Ω`\n"

    embed.description = description

    # –ø—ñ—Å–ª—è defer –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ followup.send
    await interaction.followup.send(embed=embed)

@client.tree.command(name="topchat", description="–¢–û–ü-15 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é –≤ —á–∞—Ç—ñ")
async def topchat(interaction: discord.Interaction):
    await interaction.response.defer()  # –¥–∞—î –±—ñ–ª—å—à–µ —á–∞—Å—É –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

    top = sorted(message_counts.items(), key=lambda x: x[1], reverse=True)[:15]
    medals = ["üëë", "ü•à", "ü•â"] + [f"#{i}" for i in range(4, 16)]
    embed = discord.Embed(
        title="üí¨ –¢–û–ü-15 –ß–∞—Ç–µ—Ä—ñ–≤",
        color=discord.Color.green(),
        timestamp=datetime.now(timezone.utc)
    )
    embed.set_footer(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å")

    description = ""
    for i, (user_id, count) in enumerate(top):
        emoji = medals[i]
        try:
            user = await client.fetch_user(int(user_id))
            name = f"<@{user.id}>"
        except:
            name = "`Unknown User`"
        description += f"**{emoji}** {name} ‚Äî `{count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`\n"

    embed.description = description
    await interaction.followup.send(embed=embed)  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π followup

@client.tree.command(name="me", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à—É —Ç–µ–∫—Å—Ç–æ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
async def me(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    msg_count = message_counts.get(user_id,message_counts[user_id])
    embed = discord.Embed(
        title=f"üí¨ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {interaction.user.name}",
        description=f"–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ `{msg_count}` –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –º–æ–º–µ–Ω—Ç—É –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.",
        color=discord.Color.blue()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@client.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –∫–æ–ø—ñ–π–æ–∫")
async def balance(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    amount = round(user_balances.get(user_id, 0.0), 2)
    embed = discord.Embed(
        title=f"üí≥ –ë–∞–ª–∞–Ω—Å {interaction.user.name}",
        description=f"–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É: `{amount} –ö–æ–ø—ñ–π–æ–∫`",
        color=discord.Color.gold()
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@client.tree.command(name="pay", description="–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ–ø—ñ–π–∫–∏ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
@app_commands.describe(user="–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏", amount="–°–∫—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–¥–∞—Ç–∏")
async def pay(interaction: discord.Interaction, user: discord.User, amount: float):
    sender_id = str(interaction.user.id)
    receiver_id = str(user.id)
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0!", ephemeral=True)
        return
    if user_balances[sender_id] < amount:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!", ephemeral=True)
        return
    user_balances[sender_id] -= amount
    user_balances[receiver_id] += amount
    save_data()
    await interaction.response.send_message(f"‚úÖ –í–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount:.2f} –º–æ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.mention}", ephemeral=True)

@client.tree.command(name="give", description="–í–∏–¥–∞—Ç–∏ –∫–æ–ø—ñ–π–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)")
@app_commands.describe(user="–ö–æ–º—É –≤–∏–¥–∞—Ç–∏", amount="–°–∫—ñ–ª—å–∫–∏ –∫–æ–ø—ñ–π–æ–∫")
async def give(interaction: discord.Interaction, user: discord.User, amount: float):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!", ephemeral=True)
        return
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0!", ephemeral=True)
        return
    user_balances[str(user.id)] += amount
    save_data()
    await interaction.response.send_message(f"‚úÖ –í–∏–¥–∞–Ω–æ {amount:.2f} –∫–æ–ø—ñ–π–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.mention}", ephemeral=True)

@client.tree.command(name="take", description="–ó–Ω—è—Ç–∏ –∫–æ–ø—ñ–π–∫–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)")
@app_commands.describe(user="–ó –∫–æ–≥–æ –∑–Ω—è—Ç–∏", amount="–°–∫—ñ–ª—å–∫–∏ –∫–æ–ø—ñ–π–æ–∫")
async def take(interaction: discord.Interaction, user: discord.User, amount: float):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!", ephemeral=True)
        return
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0!", ephemeral=True)
        return
    user_balances[str(user.id)] = max(0.0, user_balances[str(user.id)] - amount)
    save_data()
    await interaction.response.send_message(f"‚úÖ –ó–Ω—è—Ç–æ {amount:.2f} –∫–æ–ø—ñ–π–æ–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.mention}", ephemeral=True)

@tasks.loop(minutes=1)
async def save_loop():
    save_data()
#    cleanup_old_voice_data()
    print("[AUTOSAVE] –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

client.run(token)
